<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python：一些提高代码质量的基本 Type hinting</title>
      <link href="/2023/11/22/Python%EF%BC%9A%E4%B8%80%E4%BA%9B%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC-Type-hinting/"/>
      <url>/2023/11/22/Python%EF%BC%9A%E4%B8%80%E4%BA%9B%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC-Type-hinting/</url>
      
        <content type="html"><![CDATA[<h1 id="Python：一些提高代码质量的基本-Type-hinting"><a href="#Python：一些提高代码质量的基本-Type-hinting" class="headerlink" title="Python：一些提高代码质量的基本 Type hinting"></a>Python：一些提高代码质量的基本 Type hinting</h1><p><em>本文转载自<a href="https://www.less-bug.com/posts/python-type-hinting-basics/">Python：一些提高代码质量的基本 Type hinting</a></em></p><p>有一天，程序员 Alice 提交了代码。我们来看看他的代码好不好维护？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1def get_authors_names(posts):</span><br><span class="line">2    authors_names = []</span><br><span class="line">3    for post in posts:</span><br><span class="line">4        author = post[&quot;author&quot;]</span><br><span class="line">5        author_name = author[&quot;name&quot;]</span><br><span class="line">6        authors_names.append(author_name)</span><br><span class="line">7    return authors_names</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 2023 年，答案是确定的，这就是一坨大便。现在已经有了类型标注特性，如果不是为了兼容性考虑，不写类型的行为比不写注释更加恶劣！</p><p>味道指数：★★（鉴定为：臭味）</p><p>首先，posts 属于 Any 数据类型，但是代码里强假设了它是一个列表，且列表元素每个都具有 author 字段，每个 author 字段的值都有 name 字段。这种假设没有任何东西来保证。导致拉屎一时爽，维护火葬场。</p><p>打回去重写！</p><p>五分钟之后，Alice 给出了新的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1def get_authors_names(posts):</span><br><span class="line">2    authors_names = []</span><br><span class="line">3    for post in posts:</span><br><span class="line">4        author = post.get(&quot;author&quot;)  # 使用字典的get方法获取值，如果键不存在则返回None</span><br><span class="line">5        if author is not None:</span><br><span class="line">6            author_name = author.get(&quot;name&quot;)  # 使用字典的get方法获取值，如果键不存在则返回None</span><br><span class="line">7            if author_name is not None:</span><br><span class="line">8                authors_names.append(author_name)</span><br><span class="line">9    return authors_names</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Alice 想：哈哈，我检查了空值，这样代码质量大大提高！</p><p>恰恰相反，这种代码是真正的屎山。</p><p>味道指数：三颗星（鉴定为：强烈的臭味）</p><p>这是我工作中遇到同事最喜欢写的代码。这些同事喜欢在代码的左边画三角形，三角形越大，缩进越多，就越能促进游标卡尺的销量，帮助我国走出经济危机。</p><p>Alice，你不用写了，还是我来！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 1from typing import List, TypedDict</span><br><span class="line"> 2</span><br><span class="line"> 3class Author(TypedDict):</span><br><span class="line"> 4    name: str</span><br><span class="line"> 5    email: str</span><br><span class="line"> 6    bio: str</span><br><span class="line"> 7    website: str</span><br><span class="line"> 8</span><br><span class="line"> 9class Post(TypedDict):</span><br><span class="line">10    title: str</span><br><span class="line">11    author: Author</span><br><span class="line">12    publication_date: str</span><br><span class="line">13    content: str</span><br><span class="line">14</span><br><span class="line">15def get_authors_names(posts: List[Post]) -&gt; List[str]:</span><br><span class="line">16    return [post[&quot;author&quot;][&quot;name&quot;] for post in posts]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>味道指数：?（请网友自行鉴定）</p><p>这里我们利用了 Python 的 typing 特性，为参数标记了类型。这样，我们就可以在编译时期发现错误，而不是在运行时期。</p><p>之后如果要新增功能，用到了新的字段，也可以直接利用类型提示编码，不用你重新复现出数据的来源，然后打印出来一个个看。</p><p>为了告诉大家有多香，我简单演示一下。</p><p>这是第一种情况，我们要统计所有文章的长度之和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1def get_total_content_length(posts: List[Post]):</span><br><span class="line">2    total_length = 0</span><br><span class="line">3    for post in posts:</span><br><span class="line">4        content = post[&quot;content&quot;]</span><br><span class="line">5        total_length += len(content)</span><br><span class="line">6    return total_length</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到当我们输入 <code>[</code> 的时候，编辑器就会提示可以输入什么。</p><p>第二种情况，假设我不小心把字段名打错了：</p><p>可以看到编辑器直接就报错了。这种小毛病如果运行时才发现，而且是在生产环境，那就是灾难了。</p><h2 id="常见的-typing"><a href="#常见的-typing" class="headerlink" title="常见的 typing"></a>常见的 typing</h2><p>下面我们介绍一下 Python 的常用的 typing。介绍完之后我们继续攻占下一个屎山！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> 1</span><br><span class="line"> 2</span><br><span class="line"> 3</span><br><span class="line"> 4</span><br><span class="line"> 5import typing as t</span><br><span class="line"> 6</span><br><span class="line"> 7# 字符串</span><br><span class="line"> 8greet: str = &quot;hello&quot;</span><br><span class="line"> 9</span><br><span class="line">10# 浮点数</span><br><span class="line">11radius: float = 0.1</span><br><span class="line">12</span><br><span class="line">13# 整数</span><br><span class="line">14num_children: int = 10</span><br><span class="line">15</span><br><span class="line">16# 布尔值</span><br><span class="line">17is_cool: bool = True</span><br><span class="line">18</span><br><span class="line">19# 字节串</span><br><span class="line">20data: bytes = b&quot;hello&quot;</span><br><span class="line">21</span><br><span class="line">22# 列表</span><br><span class="line">23numbers: list[int] = [1, 2, 3, 4, 5]</span><br><span class="line">24</span><br><span class="line">25# 元组</span><br><span class="line">26coordinates: tuple[float, float] = (3.5, 2.7)</span><br><span class="line">27</span><br><span class="line">28# 字典</span><br><span class="line">29person: dict[str, t.Union[str, int]] = &#123;</span><br><span class="line">30    &quot;name&quot;: &quot;Alice&quot;,</span><br><span class="line">31    &quot;age&quot;: 25,</span><br><span class="line">32    &quot;city&quot;: &quot;New York&quot;</span><br><span class="line">33&#125;</span><br><span class="line">34</span><br><span class="line">35# 集合</span><br><span class="line">36fruits: set[str] = &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;&#125;</span><br><span class="line">37</span><br><span class="line">38# 自定义类型</span><br><span class="line">39class Point:</span><br><span class="line">40    def __init__(self, x: float, y: float):</span><br><span class="line">41        self.x = x</span><br><span class="line">42        self.y = y</span><br><span class="line">43</span><br><span class="line">44# 使用自定义类型</span><br><span class="line">45p1: Point = Point(2.0, 3.5)</span><br><span class="line">46p2: Point = Point(1.0, -4.5)</span><br><span class="line">47</span><br><span class="line">48# 函数类型注解</span><br><span class="line">49def add(x: int, y: int) -&gt; int:</span><br><span class="line">50    return x + y</span><br><span class="line">51</span><br><span class="line">52# 使用函数类型注解</span><br><span class="line">53result: int = add(5, 10)</span><br><span class="line">54</span><br><span class="line">55# 类型别名</span><br><span class="line">56Vector = t.Tuple[float, float]</span><br><span class="line">57</span><br><span class="line">58# 使用类型别名</span><br><span class="line">59vector: Vector = (2.5, 1.8)</span><br><span class="line">60</span><br><span class="line">61# 可选类型</span><br><span class="line">62name: t.Optional[str] = None</span><br><span class="line">63</span><br><span class="line">64# 默认参数</span><br><span class="line">65def greet_person(name: str = &quot;John&quot;) -&gt; None:</span><br><span class="line">66    print(f&quot;Hello, &#123;name&#125;!&quot;)</span><br><span class="line">67</span><br><span class="line">68# 使用默认参数</span><br><span class="line">69greet_person()  # 输出: Hello, John!</span><br><span class="line">70greet_person(&quot;Alice&quot;)  # 输出: Hello, Alice!</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="屎山重构之简单工厂"><a href="#屎山重构之简单工厂" class="headerlink" title="屎山重构之简单工厂"></a>屎山重构之简单工厂</h2><p>好，现在 Bob 登场，他写了一个 create_storage() 函数。实现了根据 storage_type 生成不同的 StorageClient 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> 1class S3StorageClient:</span><br><span class="line"> 2    def __init__(self):</span><br><span class="line"> 3        ...</span><br><span class="line"> 4</span><br><span class="line"> 5    def sync(self, src, dest):</span><br><span class="line"> 6        ...</span><br><span class="line"> 7</span><br><span class="line"> 8</span><br><span class="line"> 9class AzureCloudStorageClient:</span><br><span class="line">10    def __init__(self):</span><br><span class="line">11        ...</span><br><span class="line">12</span><br><span class="line">13    def sync(self, src, dest):</span><br><span class="line">14        ...</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17def create_storage(storage_type: Literal[&quot;s3&quot;, &quot;azure&quot;]):</span><br><span class="line">18    if storage_type == &quot;s3&quot;:</span><br><span class="line">19        return S3StorageClient()</span><br><span class="line">20    elif storage_type == &quot;azure&quot;:</span><br><span class="line">21        return AzureCloudStorageClient()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还是那句话，在 Python3.5 之前这么写没问题，但是现在这么写就是给自己挖坑。</p><p>我们先不改代码，大家看能在这个代码找到几个问题？</p><ol><li><p>sync 函数，能理解 src 和 dest 代表什么吗？是从本地的 src 路径复制到远程的 dest 路径吗？还是反过来？还是两边都是远程路径？还是说都可以？传入的是相对路径还是绝对路径？</p></li><li><p>万一增加新的 StorageClient，怎么保证实现者能够实现所需要的函数（sync）</p></li><li><p>sync 的返回值是什么类型？</p></li><li><p>每次使用者都需要手动输入 storage_type，万一输错了怎么办？那外面每次都需要套个 try catch?</p></li></ol><p>我们现在一步步修改。第一步是定义一个抽象基类叫做 StorageClient，抽象基类的话，相当于其他语言中的接口，用来限定它的子类型必须实现哪些方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> 1from abc import ABCMeta, abstractmethod</span><br><span class="line"> 2from urllib.parse import ParseResult</span><br><span class="line"> 3import typing as t</span><br><span class="line"> 4</span><br><span class="line"> 5URI = ParseResult</span><br><span class="line"> 6</span><br><span class="line"> 7</span><br><span class="line"> 8class StorageClient(metaclass=ABCMeta):</span><br><span class="line"> 9    @abstractmethod</span><br><span class="line">10    def sync(self, src: URI, dest: URI) -&gt; None:</span><br><span class="line">11        &quot;&quot;&quot;</span><br><span class="line">12        Sync files from a source URI to a destination URI.</span><br><span class="line">13</span><br><span class="line">14        Args:</span><br><span class="line">15            src: The source URI. </span><br><span class="line">16                For example, s3://bucket/path/to/file or file://path/to/file.</span><br><span class="line">17            dest: The destination URI. </span><br><span class="line">18                For example, s3://bucket/path/to/file or file://path/to/file.</span><br><span class="line">19</span><br><span class="line">20        Returns:</span><br><span class="line">21            None</span><br><span class="line">22</span><br><span class="line">23        Raises:</span><br><span class="line">24            ValueError: If the source or destination URI is invalid.</span><br><span class="line">25            IOError: If the source or destination URI is not accessible.</span><br><span class="line">26        &quot;&quot;&quot;</span><br><span class="line">27        return NotImplemented</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们还增加了注释，告诉调用者每个参数的含义。并且我们用 URI 作为参数类型，这样用户就知道，传入的 URI schema 不同，执行同步的来源和目标就会对应变化。</p><p>注释中还告诉用户什么情况下这个函数会抛出什么异常。这样调用方可以精细处理异常。</p><p>我们可以尝试增加一个新的 StorageClient，比如 WebDavStorageClient，然后故意不实现 sync，可以看到编辑器直接报错了。</p><p>下面我们再来解决 create_storage 工厂函数。这里你可以选择用 Literal 或者枚举。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 1def create_storage(</span><br><span class="line"> 2    storage_type: t.Literal[&quot;s3&quot;, &quot;azure&quot;]</span><br><span class="line"> 3) -&gt; StorageClient:</span><br><span class="line"> 4    match storage_type:</span><br><span class="line"> 5        case &quot;s3&quot;:</span><br><span class="line"> 6            return S3StorageClient()</span><br><span class="line"> 7        case &quot;azure&quot;:</span><br><span class="line"> 8            return AzureCloudStorageClient()</span><br><span class="line"> 9        case _ as unreachable:</span><br><span class="line">10            t.assert_never(unreachable)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上最后两行都可以去掉。</p><p>我们来看最终的代码：</p><p>怎么样，是不是屎味大减？</p><p>有关所有的 Typing 特性，请参考：<a href="https://docs.python.org/3/library/typing.html">typing — Support for type hints — Python 3.12.0 documentation</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OLED显示原理</title>
      <link href="/2023/10/09/OLED%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86/"/>
      <url>/2023/10/09/OLED%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="OLED屏幕的结构"><a href="#OLED屏幕的结构" class="headerlink" title="OLED屏幕的结构"></a>OLED屏幕的结构</h1><p>示例：OLED12864(128*64) 0.96寸</p><h2 id="OLED屏幕的最小控制单元"><a href="#OLED屏幕的最小控制单元" class="headerlink" title="OLED屏幕的最小控制单元"></a>OLED屏幕的最小控制单元</h2><p><img src="https://telegraph-image-6ky.pages.dev/file/e75e4d57891ba8558f703.png"></p><p>OLED屏幕的最小控制单元是八个像素组成的小竖棍，OLED12864具有8行每行128根这样的小竖棍。</p><h1 id="OLED屏幕的分类"><a href="#OLED屏幕的分类" class="headerlink" title="OLED屏幕的分类"></a>OLED屏幕的分类</h1><h2 id="控制芯片"><a href="#控制芯片" class="headerlink" title="控制芯片"></a>控制芯片</h2><p>ssd1306（oled12864的控制芯片）</p><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>I²C：</p><ol><li><p><strong>双线通信</strong>：I²C 使用两根线进行通信：Serial Data Line（SDA）和 Serial Clock Line（SCL）。SDA 用于传输数据，SCL 用于传输时钟信号。</p></li><li><p><strong>主从架构</strong>：I²C 通信是基于主从架构的，一个主设备可以控制多个从设备。主设备负责开始和结束通信，而从设备则响应主设备的指令。</p></li><li><p><strong>起始和停止条件</strong>：通信开始时，主设备发送起始条件；通信结束时，主设备发送停止条件。这些条件用于指示通信的开始和结束。</p></li><li><p><strong>帧结构</strong>：I²C 通信以帧为单位，每个帧由一个地址和一个或多个数据字节组成。通信开始时，主设备发送目标从设备的地址，然后根据需要发送数据或接收数据。</p></li><li><p><strong>时钟同步</strong>：I²C 使用时钟同步机制，时钟由主设备控制，从设备在时钟的指导下进行数据传输。</p></li><li><p><strong>数据传输模式</strong>：I²C 支持两种数据传输模式：写模式（主设备向从设备写入数据）和读模式（主设备从从设备读取数据）。</p></li><li><p><strong>速率控制</strong>：I²C 支持不同的数据传输速率，可以根据需求选择适当的速率。</p></li></ol><p>SPI：</p><ol><li><strong>SCLK（Serial Clock）</strong>：时钟信号，主设备产生并控制，同步数据传输速率。</li><li><strong>MISO（Master In Slave Out）</strong>：从设备到主设备的数据传输线，从设备将数据发送给主设备。</li><li><strong>MOSI（Master Out Slave In）</strong>：主设备到从设备的数据传输线，主设备将数据发送给从设备。</li><li>**SS&#x2F;CS (Slave Select&#x2F;Chip Select)**：片选信号，用于选择特定的从设备进行通信。</li></ol><h1 id="OLED屏幕的控制指令"><a href="#OLED屏幕的控制指令" class="headerlink" title="OLED屏幕的控制指令"></a>OLED屏幕的控制指令</h1><p>SSD1306的控制指令详见数据手册，在此列出常用指令。</p><h2 id="初始化指令"><a href="#初始化指令" class="headerlink" title="初始化指令"></a>初始化指令</h2><p><img src="https://telegraph-image-6ky.pages.dev/file/aaa82a2d77d0846972943.png"></p><h2 id="屏幕显示控制指令"><a href="#屏幕显示控制指令" class="headerlink" title="屏幕显示控制指令"></a>屏幕显示控制指令</h2><p><img src="https://telegraph-image-6ky.pages.dev/file/83724ce20068db0b5dcd8.png"></p><p><img src="https://telegraph-image-6ky.pages.dev/file/a20ef27d0a0a9b6ccabe8.png"></p><p><img src="https://telegraph-image-6ky.pages.dev/file/c623415a7050506295c9d.png"></p><h1 id="OLED屏幕的显存和驱动程序"><a href="#OLED屏幕的显存和驱动程序" class="headerlink" title="OLED屏幕的显存和驱动程序"></a>OLED屏幕的显存和驱动程序</h1><h2 id="显存"><a href="#显存" class="headerlink" title="显存"></a>显存</h2><p>显存，也称为视频内存或图形存储器，是计算机系统中用于存储图形和视频数据的专用内存区域。</p><p>主要作用包括：</p><ol><li><p><strong>图像数据存储</strong>: 保存屏幕上每个像素的颜色信息，包括RGB值，以便在屏幕上显示图像。</p></li><li><p><strong>帧缓冲区</strong>: 保存整个屏幕的图像，用于显示器刷新。</p></li></ol><p>显存的每一位数据都可以跟屏幕上的像素点一一对应，向显存写入数据，就能显示图像。显存与屏幕的显示是实时相关的。</p><h1 id="OLED屏幕的控制函数"><a href="#OLED屏幕的控制函数" class="headerlink" title="OLED屏幕的控制函数"></a>OLED屏幕的控制函数</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.waveshare.com/w/upload/archive/7/71/20150318103247%210.96inch-OLED-UserManual.pdf">0.96 OLED用户手册</a></p><p><a href="https://www.xmf393.com/wp-content/uploads/2020/02/%E4%B8%AD%E6%99%AF%E5%9B%ADOLED%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8F%96%E5%AD%97%E6%A8%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.pdf">中景园OLED模块与取字模软件的使用说明.</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 电子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加快Github Pages国内访问速度</title>
      <link href="/2023/10/01/%E5%8A%A0%E5%BF%ABGithubPages%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/"/>
      <url>/2023/10/01/%E5%8A%A0%E5%BF%ABGithubPages%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>白嫖Github Pages固然很爽，但由于墙的存在，在不使用魔法的情况下访问托管在Github Pages上的网页将会十分缓慢。于是我不得不做出一些优化来加快访问速度。本文针对Hexo博客而写，我使用的Hexo版本为4.3.1，主题为Butterfly。</p><h1 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h1><p>其实Github Pages的加载速度尚可，而最让人不能忍受的便是那乌龟般的图片加载速度。想要加快图片的加载速度，最好的方法就是不将图片托管在Github Pages上，而是使用图床。</p><p>有如下公共图床是我推荐的：</p><ul><li><p><a href="sm.ms">SM.MS</a>  虽然是国外的图床，但访问速度尚可，也不存在突然跑路的可能</p><ul><li>支持API操作、免费5GB存储空间、图片限制5MB、Telegram Bot</li></ul></li><li><p><a href="https://www.superbed.cn/">聚合图床</a></p><ul><li>支持API操作、文档详细、不限图片大小、免费用户1000张图片限制</li></ul></li></ul><p>有如下自建图床是我推荐的：</p><ul><li><p><a href="https://www.lsky.pro/">Lsky Pro - 兰空图床</a></p></li><li><p>在Cloudflare上搭建免费无限空间的图床</p></li></ul><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>Hexo生成的html&#x2F;js&#x2F;css文件中有大量注释、空格等无用的内容。可以使用<a href="https://gulpjs.com/">gulp</a>对这些静态资源进行压缩，从而节省流量、提高加载速率。</p><h2 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h2><p>在本机安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><p>在GitHub Action 或其他 CI\CD 平台安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure><p>安装必要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev \</span><br><span class="line">            gulp-minify-css \</span><br><span class="line">            gulp-babel \</span><br><span class="line">            gulp-uglify \</span><br><span class="line">            gulp-htmlmin \</span><br><span class="line">            gulp-htmlclean \</span><br></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>在Hexo博客的根目录下，新建<code>gulpfile.js</code>文件，并将以下内容复制进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&quot;gulp-minify-css&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlclean&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-css&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.css&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-html&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.html&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ignoreCustomFragments</span>: [<span class="regexp">/\&#123;\&#123;[\s\S]*?\&#125;\&#125;/</span>],</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-js&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&quot;./public/**/*.js&quot;</span>, <span class="string">&quot;!./public/js/**/*min.js&quot;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(</span><br><span class="line">  <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  gulp.<span class="title function_">series</span>(</span><br><span class="line">    gulp.<span class="title function_">parallel</span>(<span class="string">&quot;minify-html&quot;</span>, <span class="string">&quot;minify-css&quot;</span>, <span class="string">&quot;minify-js&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在使用<code>hexo g</code>生成静态资源后，运行<code>gulp</code>来对这些资源进行压缩。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCA9685舵机板驱动详解</title>
      <link href="/2023/09/28/PCA9685%E8%88%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E6%9D%BF%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/09/28/PCA9685%E8%88%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E6%9D%BF%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>pca9685驱动板支持控制16路舵机，采用i2c通信协议。</p><p><img src="https://telegraph-image-6ky.pages.dev/file/12da4aed45a84d714ee04.png"></p><ul><li><p>VCC：PCA9685芯片的电源</p></li><li><p>V+：舵机的电源</p><ul><li>舵机数量较少时电源可以通过V+引脚输入，较多时通过绿色电源输入端输入</li></ul></li></ul><h1 id="Arduino驱动示例"><a href="#Arduino驱动示例" class="headerlink" title="Arduino驱动示例"></a>Arduino驱动示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Adafruit_PWMServoDriverh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVO_45 187</span></span><br><span class="line"></span><br><span class="line">Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  pwm.begin();</span><br><span class="line">  pwm.setPWMFreq(<span class="number">50</span>);</span><br><span class="line">  pwm.setPWM(<span class="number">0</span>,<span class="number">0</span>,SERVO_45);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本示例使用了&#96;Adafruit PWM Servo Driver Library。</p><p>该程序可以使连接在PCA9685舵机驱动板上0号位的舵机转动45°。</p><p><code>setPWMFreq()</code>设置了IIC通信的更新频率（50HZ对应脉冲周期20ms），<code>setPWM()</code>的三个参数依次为舵机编号、脉冲起始时间、脉冲结束时间，其中脉冲时间要以寄存器的值来表示（187对应1.0ms）。 </p><h1 id="舵机控制逻辑"><a href="#舵机控制逻辑" class="headerlink" title="舵机控制逻辑"></a>舵机控制逻辑</h1><p>上述示例使用舵机型号为<code>SG90</code>，运动范围0°-180°，舵机的控制周期信号为20ms，工作脉冲在0.5ms-2.5ms之间，舵机的转动角度由PCA9685的12位寄存器中的值来决定，而寄存器的值由脉冲时间决定。故可以得到<code>脉冲时间-寄存器值-转动角度</code>的关系如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;0.5ms-0°&#x27;</span>:<span class="number">0.5</span>*<span class="number">204</span>=<span class="number">102</span></span><br><span class="line"><span class="string">&#x27;1.0ms-45°&#x27;</span>:<span class="number">1</span>*<span class="number">204</span>=<span class="number">204</span></span><br><span class="line"><span class="string">&#x27;1.5ms-90°&#x27;</span>:<span class="number">1.5</span>*<span class="number">204</span>=<span class="number">306</span></span><br><span class="line"><span class="string">&#x27;2.0ms-135°&#x27;</span>:<span class="number">2</span>*<span class="number">204</span>=<span class="number">408</span></span><br><span class="line"><span class="string">&#x27;2.5ms-180°&#x27;</span>:<span class="number">2.5</span>*<span class="number">204</span>=<span class="number">510</span></span><br></pre></td></tr></table></figure><p>然而在实际使用时会有误差出现，故除了0°与180°的情况，要将寄存器值乘以0.915的系数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;0.5ms-0°&#x27;</span>:<span class="number">0.5</span>*<span class="number">204</span>=<span class="number">102</span></span><br><span class="line"><span class="string">&#x27;1.0ms-45°&#x27;</span>:<span class="number">1</span>*<span class="number">204</span>=<span class="number">204</span>*<span class="number">0.915</span>=<span class="number">187</span></span><br><span class="line"><span class="string">&#x27;1.5ms-90°&#x27;</span>:<span class="number">1.5</span>*<span class="number">204</span>=<span class="number">306</span>*<span class="number">0.915</span>=<span class="number">280</span></span><br><span class="line"><span class="string">&#x27;2.0ms-135°&#x27;</span>:<span class="number">2</span>*<span class="number">204</span>=<span class="number">408</span>*<span class="number">0.915</span>=<span class="number">373</span></span><br><span class="line"><span class="string">&#x27;2.5ms-180°&#x27;</span>:<span class="number">2.5</span>*<span class="number">204</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266-NodeMCU食用指南</title>
      <link href="/2023/09/20/ESP8266-NodeMCU%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2023/09/20/ESP8266-NodeMCU%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="WIFI模式"><a href="#WIFI模式" class="headerlink" title="WIFI模式"></a>WIFI模式</h2><h3 id="接入点模式"><a href="#接入点模式" class="headerlink" title="接入点模式"></a>接入点模式</h3><p>esp8266作为接入点，其他设备通过wifi与esp8266连接。</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用</span></span><br><span class="line"><span class="comment">电脑或者手机连接NodeMCU所建立WiFi网络。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;wifi_name&quot;</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;12345678&quot;</span>; <span class="comment">// 如果建立的WiFi不要密码，则在双引号内不要填入任何信息</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);              <span class="comment">// 启动串口通讯</span></span><br><span class="line"></span><br><span class="line">  WiFi.softAP(ssid, password);     <span class="comment">// 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。</span></span><br><span class="line"></span><br><span class="line">  Serial.print(<span class="string">&quot;Access Point: &quot;</span>);    <span class="comment">// 通过串口监视器输出信息</span></span><br><span class="line">  Serial.println(ssid);              <span class="comment">// 告知用户NodeMCU所建立的WiFi名</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address: &quot;</span>);      <span class="comment">// 以及NodeMCU的IP地址</span></span><br><span class="line">  Serial.println(WiFi.softAPIP());   <span class="comment">// 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无线终端模式"><a href="#无线终端模式" class="headerlink" title="无线终端模式"></a>无线终端模式</h3><p>esp8266与路由器连接。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此程序用于演示如何将NodeMcu以接入点模式工作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;wifi_name&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;pswd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>)</span><br><span class="line"></span><br><span class="line">    WiFi.begin(ssid, password);                  <span class="comment">// 启动网络连接</span></span><br><span class="line">    Serial.print(<span class="string">&quot;Connecting to &quot;</span>);              </span><br><span class="line">    Serial.print(ssid); </span><br><span class="line">    Serial.println(<span class="string">&quot; ...&quot;</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;                                   <span class="comment">// 这一段程序语句用于检查WiFi是否连接成功</span></span><br><span class="line">    <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;      </span><br><span class="line">        delay(<span class="number">1000</span>);                                                     </span><br><span class="line">        Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);     </span><br><span class="line">    &#125;                                            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网络服务器"><a href="#网络服务器" class="headerlink" title="网络服务器"></a>网络服务器</h1><h2 id="简单的网络服务器"><a href="#简单的网络服务器" class="headerlink" title="简单的网络服务器"></a>简单的网络服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址访问8266所建立的基本网页</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>       </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   </span></span><br><span class="line"></span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>; <span class="comment">// 括号中的数字是网路服务器响应http请求的端口号</span></span><br><span class="line">                                     <span class="comment">// 网络服务器标准http端口号为80，因此这里使用80为端口号</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *password = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  pinMode(LED_BUILTIN,OUTPUT); <span class="comment">//把内置led引脚设置为输出模式</span></span><br><span class="line"></span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;  </span><br><span class="line">    delay(<span class="number">1000</span>);                             </span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    </span><br><span class="line">  &#125;                                          </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动网络服务功能  </span></span><br><span class="line">  esp8266_server.begin();                   </span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, handleRoot);       <span class="comment">// 将页面&quot;/&quot;交给handleRoot()处理</span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/LED&quot;</span>,handleLED);</span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);  <span class="comment">// 将404页面交给handleNotFound()处理      </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// handleClient每次被调用时，NodeMCU都会检查一下是否接收到http请求。</span></span><br><span class="line">  esp8266_server.handleClient();     <span class="comment">// 处理http服务器访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;   <span class="comment">//处理网站根目录“/”的访问请求 </span></span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;&lt;form action=\&quot;/LED\&quot; method=\&quot;POST\&quot;&gt;&lt;input type=\&quot;submit\&quot; value=\&quot;Toggle LED\&quot;&gt;&lt;/form&gt;&quot;</span>);   <span class="comment">// 状态行、响应头、响应体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleLED</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));</span><br><span class="line">  esp8266_server.sendHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/&quot;</span>); <span class="comment">// 返回&quot;/&quot;</span></span><br><span class="line">  esp8266_server.send(<span class="number">303</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;                                        </span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>);   <span class="comment">// 当浏览器请求的网络资源无法在服务器找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>handleClient</code>函数长时间得不到调用，NodeMCU的网络服务会变得很不稳定。因此在使用NodeMCU执行网络服务功能的时候，一定要确保<code>handleClient</code>函数经常得以调用。</p><h1 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h1><h2 id="MQTT通信"><a href="#MQTT通信" class="headerlink" title="MQTT通信"></a>MQTT通信</h2><p>MQTT通信与HTTP通信都基于TCP&#x2F;IP协议，物联网应用中多使用MQTT协议，它有如下优点：</p><ul><li><p>MQTT是一种轻量级协议，因此可以在网络带宽受限的情况下使用。</p></li><li><p>MQTT使用发布&#x2F;订阅模式，这意味着客户端只需要订阅感兴趣的主题即可接收消息。这种模式可以减少网络流量和服务器负载。</p></li><li><p>MQTT支持QoS（Quality of Service）等级，可以确保消息传递的可靠性和一致性。</p></li><li><p>MQTT支持离线消息缓存和消息保留功能，这意味着客户端可以在重新连接到服务器时接收到之前未接收到的消息。</p></li></ul><h2 id="HTTP通信"><a href="#HTTP通信" class="headerlink" title="HTTP通信"></a>HTTP通信</h2><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">请求行:</span><br><span class="line">GET / HTTP/1.1 # &#x27;GET&#x27;:读取 &#x27;/&#x27;:网站首页 &#x27;HTTP/1.1&#x27;:协议版本</span><br><span class="line"></span><br><span class="line">请求头:</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.baidu.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Accept-Launguage</span><span class="punctuation">: </span>zh-CN,zh;q=0.8</span><br><span class="line"><span class="attribute">Accept-Ecoding</span><span class="punctuation">: </span>gzip,deflate,sdch</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">状态行:</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"><span class="language-makefile"><span class="section">响应头:</span></span></span><br><span class="line"><span class="language-makefile"><span class="section">Date: Fri,22 May 2009 06:07:21 GMT</span></span></span><br><span class="line"><span class="language-makefile"><span class="section">Content-Type: text/html;charset=UTF-8</span></span></span><br><span class="line"><span class="language-makefile"></span></span><br><span class="line"><span class="language-makefile"><span class="section">响应体:</span></span></span><br><span class="line"><span class="language-makefile">&lt;html&gt;...&lt;html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用WiFiClient库实现HTTP通信"><a href="#使用WiFiClient库实现HTTP通信" class="headerlink" title="使用WiFiClient库实现HTTP通信"></a>使用WiFiClient库实现HTTP通信</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">wifiClientRequest</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 建立WiFi客户端对象，对象名称client</span></span><br><span class="line">  WiFiClient client;    </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立字符串，用于HTTP请求</span></span><br><span class="line">  String httpRequest =  String(<span class="string">&quot;GET /&quot;</span>) + <span class="string">&quot; HTTP/1.1\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Host: &quot;</span> + host + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Connection: close\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过串口输出连接服务器名称以便查阅连接服务器的网址                      </span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connecting to &quot;</span>); </span><br><span class="line">  Serial.print(host); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// http服务器的默认端口号为80</span></span><br><span class="line">  <span class="keyword">if</span> (client.connect(host, httpPort))&#123; </span><br><span class="line">    Serial.println(<span class="string">&quot; Success!&quot;</span>);        </span><br><span class="line"></span><br><span class="line">    client.print(httpRequest);          <span class="comment">// 向服务器发送HTTP请求   </span></span><br><span class="line"></span><br><span class="line">    Serial.println(<span class="string">&quot;Web Server Response:&quot;</span>);        </span><br><span class="line">    <span class="keyword">while</span> (client.connected() || client.available())&#123; </span><br><span class="line">      <span class="keyword">if</span> (client.available())&#123;</span><br><span class="line">        String line = client.readStringUntil(<span class="string">&#x27;\n&#x27;</span>); <span class="comment">// 读取服务器发送的信息</span></span><br><span class="line">        Serial.println(line);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client.stop();                      <span class="comment">// 断开与服务器的连接</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot; connection failed!&quot;</span>);</span><br><span class="line">    client.stop();</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="闪存文件系统"><a href="#闪存文件系统" class="headerlink" title="闪存文件系统"></a>闪存文件系统</h1><p>ESP8266具有4Mb的闪存（SPIFFS），除了能存放程序，还能存放各种资源文件，如html文件、系统配置文件等。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="写入-删除"><a href="#写入-删除" class="headerlink" title="写入&#x2F;删除"></a>写入&#x2F;删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;FS.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line">String file_name = <span class="string">&quot;/taichi-maker/notes.txt&quot;</span>; <span class="comment">//被读取的文件位置和名称</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  SPIFFS.format();    <span class="comment">// 格式化SPIFFS，清除闪存中的所有内容</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(SPIFFS.begin())&#123; <span class="comment">// 启动SPIFFS</span></span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Started.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入信息</span></span><br><span class="line">  File dataFile = SPIFFS.open(file_name, <span class="string">&quot;w&quot;</span>);<span class="comment">// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息 &quot;w&quot;即write</span></span><br><span class="line">  dataFile.println(<span class="string">&quot;Hello IOT World.&quot;</span>);       <span class="comment">// 向dataFile写入字符串信息       </span></span><br><span class="line">  dataFile.close();                           <span class="comment">// 完成文件写入后关闭文件</span></span><br><span class="line">  <span class="comment">// 删除信息</span></span><br><span class="line">  <span class="keyword">if</span> (SPIFFS.remove(file_name))&#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查闪存中是否有file_name</span></span><br><span class="line"><span class="keyword">if</span> (SPIFFS.exists(file_name))&#123;</span><br><span class="line">  Serial.print(file_name);</span><br><span class="line">  Serial.println(<span class="string">&quot; FOUND.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  Serial.print(file_name);</span><br><span class="line">  Serial.print(<span class="string">&quot; NOT FOUND.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">File dataFile = SPIFFS.open(File_name,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">// 读取文件内容并输出到串口</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;dataFile.size(); i++)&#123;</span><br><span class="line">  Serial.print((<span class="type">char</span>)dataFile.read());       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataFile.close();</span><br><span class="line">Dir dir = SPIFFS.openDir(folder_name); <span class="comment">// 读取目录对象</span></span><br><span class="line"><span class="keyword">while</span> (dir.next())&#123;</span><br><span class="line">  Serial.print(dir.fileName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="闪存信息"><a href="#闪存信息" class="headerlink" title="闪存信息"></a>闪存信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闪存文件系统信息</span></span><br><span class="line">  SPIFFS.info(fs_info);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可用空间总和（单位：字节）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;totalBytes: &quot;</span>);     </span><br><span class="line">  Serial.print(fs_info.totalBytes); </span><br><span class="line">  Serial.println(<span class="string">&quot; Bytes&quot;</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 已用空间（单位：字节）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;usedBytes: &quot;</span>); </span><br><span class="line">  Serial.print(fs_info.usedBytes);</span><br><span class="line">  Serial.println(<span class="string">&quot; Bytes&quot;</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最大文件名字符限制（含路径和&#x27;\0&#x27;）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;maxPathLength: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.maxPathLength);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最多允许打开文件数量</span></span><br><span class="line">  Serial.print(<span class="string">&quot;maxOpenFiles: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.maxOpenFiles);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储块大小</span></span><br><span class="line">  Serial.print(<span class="string">&quot;blockSize: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.blockSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储页大小</span></span><br><span class="line">  Serial.print(<span class="string">&quot;pageSize: &quot;</span>);</span><br><span class="line">  Serial.println(fs_info.pageSize);</span><br></pre></td></tr></table></figure><h1 id="应用技巧"><a href="#应用技巧" class="headerlink" title="应用技巧"></a>应用技巧</h1><h2 id="多任务之Ticker库"><a href="#多任务之Ticker库" class="headerlink" title="多任务之Ticker库"></a>多任务之Ticker库</h2><p>ESP8266在运行过程中，只能一条线式的依次执行任务。但是我们在开发物联网项目时，可能需要ESP8266在执行某一任务的过程中，还能处理其它任务。比如，我们使用ESP8266来控制电机运行的同时，还需要定时检查某一个引脚上连接按钮有没有被用户按下。</p><p>为了解决以上问题，我们可以使用多线程，我使用的库是Ticker。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Tikcer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Ticker ticker;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    ticker.attach(interval, func, parameter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> parameter)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>Ticker.attach()</code>会以间隔时间<code>interval</code>执行定时任务<code>func(parameter)</code>，注意，<code>Tikcer.attach()</code>绑定的函数只能有最多一个参数。一个Tikcer对象仅能绑定一个函数。参数类型只能是char&#x2F;short&#x2F;int&#x2F;float&#x2F;void*&#x2F;char*</p><p><code>Ticker.detach()</code>会停止定时任务。</p><p>另外，在使用<code>Ticker.attach()</code>绑定的函数执行的时间必须很短，否则会产生不可预料的问题。对于执行时间较长的操作，如http请求，可以采用如下方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Tikcer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Ticker ticker;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    ticker.attach(interval, count_func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">count_func</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> parameter)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cont&gt;=interval)&#123;</span><br><span class="line">        httprequest()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
