<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Cloudflare上搭建免费无限空间的图床</title>
      <link href="/2023/10/01/%E5%9C%A8Cloudflare%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E6%97%A0%E9%99%90%E7%A9%BA%E9%97%B4%E7%9A%84%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/10/01/%E5%9C%A8Cloudflare%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E6%97%A0%E9%99%90%E7%A9%BA%E9%97%B4%E7%9A%84%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加快Github Pages国内访问速度</title>
      <link href="/2023/10/01/%E5%8A%A0%E5%BF%ABGithubPages%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/"/>
      <url>/2023/10/01/%E5%8A%A0%E5%BF%ABGithubPages%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>白嫖Github Pages固然很爽，但由于墙的存在，在不使用魔法的情况下访问托管在Github Pages上的网页将会十分缓慢。于是我不得不做出一些优化来加快访问速度。本文针对Hexo博客而写，我使用的Hexo版本为4.3.1，主题为Butterfly。</p><h1 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h1><p>其实Github Pages的加载速度尚可，而最让人不能忍受的便是那乌龟般的图片加载速度。想要加快图片的加载速度，最好的方法就是不将图片托管在Github Pages上，而是使用图床。</p><p>有如下公共图床是我推荐的：</p><ul><li><p><a href="sm.ms">SM.MS</a>  虽然是国外的图床，但访问速度尚可，也不存在突然跑路的可能</p><ul><li>支持API操作、免费5GB存储空间、图片限制5MB、Telegram Bot</li></ul></li><li><p><a href="https://www.superbed.cn/">聚合图床</a></p><ul><li>支持API操作、文档详细、不限图片大小、免费用户1000张图片限制</li></ul></li></ul><p>有如下自建图床是我推荐的：</p><ul><li><p><a href="https://www.lsky.pro/">Lsky Pro - 兰空图床</a></p></li><li><p>在Cloudflare上搭建免费无限空间的图床</p></li></ul><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>Hexo生成的html&#x2F;js&#x2F;css文件中有大量注释、空格等无用的内容。可以使用<a href="https://gulpjs.com/">gulp</a>对这些静态资源进行压缩，从而节省流量、提高加载速率。</p><h2 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h2><p>在本机安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><p>在GitHub Action 或其他 CI\CD 平台安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure><p>安装必要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev \</span><br><span class="line">            gulp-minify-css \</span><br><span class="line">            gulp-babel \</span><br><span class="line">            gulp-uglify \</span><br><span class="line">            gulp-htmlmin \</span><br><span class="line">            gulp-htmlclean \</span><br></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>在Hexo博客的根目录下，新建<code>gulpfile.js</code>文件，并将以下内容复制进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&quot;gulp-minify-css&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlclean&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-css&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.css&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-html&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.html&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ignoreCustomFragments</span>: [<span class="regexp">/\&#123;\&#123;[\s\S]*?\&#125;\&#125;/</span>],</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-js&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&quot;./public/**/*.js&quot;</span>, <span class="string">&quot;!./public/js/**/*min.js&quot;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(</span><br><span class="line">  <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  gulp.<span class="title function_">series</span>(</span><br><span class="line">    gulp.<span class="title function_">parallel</span>(<span class="string">&quot;minify-html&quot;</span>, <span class="string">&quot;minify-css&quot;</span>, <span class="string">&quot;minify-js&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在使用<code>hexo g</code>生成静态资源后，运行<code>gulp</code>来对这些资源进行压缩。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCA9685舵机板驱动详解</title>
      <link href="/2023/09/28/PCA9685%E8%88%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E6%9D%BF%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/09/28/PCA9685%E8%88%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E6%9D%BF%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>pca9685驱动板支持控制16路舵机，采用i2c通信协议。</p><p><img src="https://telegraph-image-6ky.pages.dev/file/12da4aed45a84d714ee04.png"></p><ul><li><p>VCC：PCA9685芯片的电源</p></li><li><p>V+：舵机的电源</p><ul><li>舵机数量较少时电源可以通过V+引脚输入，较多时通过绿色电源输入端输入</li></ul></li></ul><h1 id="Arduino驱动示例"><a href="#Arduino驱动示例" class="headerlink" title="Arduino驱动示例"></a>Arduino驱动示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Adafruit_PWMServoDriverh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVO_45 187</span></span><br><span class="line"></span><br><span class="line">Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  pwm.begin();</span><br><span class="line">  pwm.setPWMFreq(<span class="number">50</span>);</span><br><span class="line">  pwm.setPWM(<span class="number">0</span>,<span class="number">0</span>,SERVO_45);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本示例使用了&#96;Adafruit PWM Servo Driver Library。</p><p>该程序可以使连接在PCA9685舵机驱动板上0号位的舵机转动45°。</p><p><code>setPWMFreq()</code>设置了IIC通信的更新频率（50HZ对应脉冲周期20ms），<code>setPWM()</code>的三个参数依次为舵机编号、脉冲起始时间、脉冲结束时间，其中脉冲时间要以寄存器的值来表示（187对应1.0ms）。 </p><h1 id="舵机控制逻辑"><a href="#舵机控制逻辑" class="headerlink" title="舵机控制逻辑"></a>舵机控制逻辑</h1><p>上述示例使用舵机型号为<code>SG90</code>，运动范围0°-180°，舵机的控制周期信号为20ms，工作脉冲在0.5ms-2.5ms之间，舵机的转动角度由PCA9685的12位寄存器中的值来决定，而寄存器的值由脉冲时间决定。故可以得到<code>脉冲时间-寄存器值-转动角度</code>的关系如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;0.5ms-0°&#x27;</span>:<span class="number">0.5</span>*<span class="number">204</span>=<span class="number">102</span></span><br><span class="line"><span class="string">&#x27;1.0ms-45°&#x27;</span>:<span class="number">1</span>*<span class="number">204</span>=<span class="number">204</span></span><br><span class="line"><span class="string">&#x27;1.5ms-90°&#x27;</span>:<span class="number">1.5</span>*<span class="number">204</span>=<span class="number">306</span></span><br><span class="line"><span class="string">&#x27;2.0ms-135°&#x27;</span>:<span class="number">2</span>*<span class="number">204</span>=<span class="number">408</span></span><br><span class="line"><span class="string">&#x27;2.5ms-180°&#x27;</span>:<span class="number">2.5</span>*<span class="number">204</span>=<span class="number">510</span></span><br></pre></td></tr></table></figure><p>然而在实际使用时会有误差出现，故除了0°与180°的情况，要将寄存器值乘以0.915的系数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;0.5ms-0°&#x27;</span>:<span class="number">0.5</span>*<span class="number">204</span>=<span class="number">102</span></span><br><span class="line"><span class="string">&#x27;1.0ms-45°&#x27;</span>:<span class="number">1</span>*<span class="number">204</span>=<span class="number">204</span>*<span class="number">0.915</span>=<span class="number">187</span></span><br><span class="line"><span class="string">&#x27;1.5ms-90°&#x27;</span>:<span class="number">1.5</span>*<span class="number">204</span>=<span class="number">306</span>*<span class="number">0.915</span>=<span class="number">280</span></span><br><span class="line"><span class="string">&#x27;2.0ms-135°&#x27;</span>:<span class="number">2</span>*<span class="number">204</span>=<span class="number">408</span>*<span class="number">0.915</span>=<span class="number">373</span></span><br><span class="line"><span class="string">&#x27;2.5ms-180°&#x27;</span>:<span class="number">2.5</span>*<span class="number">204</span></span><br></pre></td></tr></table></figure><p><img src="D:\Devlopment\Blog\watermeko-blog\node_modules\hexo-theme-butterfly\source\img\favicon.png" alt="favicon"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266-NodeMCU食用指南</title>
      <link href="/2023/09/20/ESP8266-NodeMCU%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2023/09/20/ESP8266-NodeMCU%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="WIFI模式"><a href="#WIFI模式" class="headerlink" title="WIFI模式"></a>WIFI模式</h2><h3 id="接入点模式"><a href="#接入点模式" class="headerlink" title="接入点模式"></a>接入点模式</h3><p>esp8266作为接入点，其他设备通过wifi与esp8266连接。</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用</span></span><br><span class="line"><span class="comment">电脑或者手机连接NodeMCU所建立WiFi网络。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;wifi_name&quot;</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;12345678&quot;</span>; <span class="comment">// 如果建立的WiFi不要密码，则在双引号内不要填入任何信息</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);              <span class="comment">// 启动串口通讯</span></span><br><span class="line"></span><br><span class="line">  WiFi.softAP(ssid, password);     <span class="comment">// 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。</span></span><br><span class="line"></span><br><span class="line">  Serial.print(<span class="string">&quot;Access Point: &quot;</span>);    <span class="comment">// 通过串口监视器输出信息</span></span><br><span class="line">  Serial.println(ssid);              <span class="comment">// 告知用户NodeMCU所建立的WiFi名</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address: &quot;</span>);      <span class="comment">// 以及NodeMCU的IP地址</span></span><br><span class="line">  Serial.println(WiFi.softAPIP());   <span class="comment">// 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无线终端模式"><a href="#无线终端模式" class="headerlink" title="无线终端模式"></a>无线终端模式</h3><p>esp8266与路由器连接。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此程序用于演示如何将NodeMcu以接入点模式工作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;wifi_name&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;pswd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>)</span><br><span class="line"></span><br><span class="line">    WiFi.begin(ssid, password);                  <span class="comment">// 启动网络连接</span></span><br><span class="line">    Serial.print(<span class="string">&quot;Connecting to &quot;</span>);              </span><br><span class="line">    Serial.print(ssid); </span><br><span class="line">    Serial.println(<span class="string">&quot; ...&quot;</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;                                   <span class="comment">// 这一段程序语句用于检查WiFi是否连接成功</span></span><br><span class="line">    <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;      </span><br><span class="line">        delay(<span class="number">1000</span>);                                                     </span><br><span class="line">        Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);     </span><br><span class="line">    &#125;                                            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网络服务器"><a href="#网络服务器" class="headerlink" title="网络服务器"></a>网络服务器</h1><h2 id="简单的网络服务器"><a href="#简单的网络服务器" class="headerlink" title="简单的网络服务器"></a>简单的网络服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址访问8266所建立的基本网页</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>       </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   </span></span><br><span class="line"></span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>; <span class="comment">// 括号中的数字是网路服务器响应http请求的端口号</span></span><br><span class="line">                                     <span class="comment">// 网络服务器标准http端口号为80，因此这里使用80为端口号</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *password = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  pinMode(LED_BUILTIN,OUTPUT); <span class="comment">//把内置led引脚设置为输出模式</span></span><br><span class="line"></span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;  </span><br><span class="line">    delay(<span class="number">1000</span>);                             </span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    </span><br><span class="line">  &#125;                                          </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动网络服务功能  </span></span><br><span class="line">  esp8266_server.begin();                   </span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, handleRoot);       <span class="comment">// 将页面&quot;/&quot;交给handleRoot()处理</span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/LED&quot;</span>,handleLED);</span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);  <span class="comment">// 将404页面交给handleNotFound()处理      </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// handleClient每次被调用时，NodeMCU都会检查一下是否接收到http请求。</span></span><br><span class="line">  esp8266_server.handleClient();     <span class="comment">// 处理http服务器访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;   <span class="comment">//处理网站根目录“/”的访问请求 </span></span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;&lt;form action=\&quot;/LED\&quot; method=\&quot;POST\&quot;&gt;&lt;input type=\&quot;submit\&quot; value=\&quot;Toggle LED\&quot;&gt;&lt;/form&gt;&quot;</span>);   <span class="comment">// 状态行、响应头、响应体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleLED</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));</span><br><span class="line">  esp8266_server.sendHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/&quot;</span>); <span class="comment">// 返回&quot;/&quot;</span></span><br><span class="line">  esp8266_server.send(<span class="number">303</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;                                        </span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>);   <span class="comment">// 当浏览器请求的网络资源无法在服务器找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>handleClient</code>函数长时间得不到调用，NodeMCU的网络服务会变得很不稳定。因此在使用NodeMCU执行网络服务功能的时候，一定要确保<code>handleClient</code>函数经常得以调用。</p><h1 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h1><h2 id="MQTT通信"><a href="#MQTT通信" class="headerlink" title="MQTT通信"></a>MQTT通信</h2><p>MQTT通信与HTTP通信都基于TCP&#x2F;IP协议，物联网应用中多使用MQTT协议，它有如下优点：</p><ul><li><p>MQTT是一种轻量级协议，因此可以在网络带宽受限的情况下使用。</p></li><li><p>MQTT使用发布&#x2F;订阅模式，这意味着客户端只需要订阅感兴趣的主题即可接收消息。这种模式可以减少网络流量和服务器负载。</p></li><li><p>MQTT支持QoS（Quality of Service）等级，可以确保消息传递的可靠性和一致性。</p></li><li><p>MQTT支持离线消息缓存和消息保留功能，这意味着客户端可以在重新连接到服务器时接收到之前未接收到的消息。</p></li></ul><h2 id="HTTP通信"><a href="#HTTP通信" class="headerlink" title="HTTP通信"></a>HTTP通信</h2><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">请求行:</span><br><span class="line">GET / HTTP/1.1 # &#x27;GET&#x27;:读取 &#x27;/&#x27;:网站首页 &#x27;HTTP/1.1&#x27;:协议版本</span><br><span class="line"></span><br><span class="line">请求头:</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.baidu.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Accept-Launguage</span><span class="punctuation">: </span>zh-CN,zh;q=0.8</span><br><span class="line"><span class="attribute">Accept-Ecoding</span><span class="punctuation">: </span>gzip,deflate,sdch</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">状态行:</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"><span class="language-makefile"><span class="section">响应头:</span></span></span><br><span class="line"><span class="language-makefile"><span class="section">Date: Fri,22 May 2009 06:07:21 GMT</span></span></span><br><span class="line"><span class="language-makefile"><span class="section">Content-Type: text/html;charset=UTF-8</span></span></span><br><span class="line"><span class="language-makefile"></span></span><br><span class="line"><span class="language-makefile"><span class="section">响应体:</span></span></span><br><span class="line"><span class="language-makefile">&lt;html&gt;...&lt;html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用WiFiClient库实现HTTP通信"><a href="#使用WiFiClient库实现HTTP通信" class="headerlink" title="使用WiFiClient库实现HTTP通信"></a>使用WiFiClient库实现HTTP通信</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">wifiClientRequest</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 建立WiFi客户端对象，对象名称client</span></span><br><span class="line">  WiFiClient client;    </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立字符串，用于HTTP请求</span></span><br><span class="line">  String httpRequest =  String(<span class="string">&quot;GET /&quot;</span>) + <span class="string">&quot; HTTP/1.1\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Host: &quot;</span> + host + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Connection: close\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过串口输出连接服务器名称以便查阅连接服务器的网址                      </span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connecting to &quot;</span>); </span><br><span class="line">  Serial.print(host); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// http服务器的默认端口号为80</span></span><br><span class="line">  <span class="keyword">if</span> (client.connect(host, httpPort))&#123; </span><br><span class="line">    Serial.println(<span class="string">&quot; Success!&quot;</span>);        </span><br><span class="line"></span><br><span class="line">    client.print(httpRequest);          <span class="comment">// 向服务器发送HTTP请求   </span></span><br><span class="line"></span><br><span class="line">    Serial.println(<span class="string">&quot;Web Server Response:&quot;</span>);        </span><br><span class="line">    <span class="keyword">while</span> (client.connected() || client.available())&#123; </span><br><span class="line">      <span class="keyword">if</span> (client.available())&#123;</span><br><span class="line">        String line = client.readStringUntil(<span class="string">&#x27;\n&#x27;</span>); <span class="comment">// 读取服务器发送的信息</span></span><br><span class="line">        Serial.println(line);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client.stop();                      <span class="comment">// 断开与服务器的连接</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot; connection failed!&quot;</span>);</span><br><span class="line">    client.stop();</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="闪存文件系统"><a href="#闪存文件系统" class="headerlink" title="闪存文件系统"></a>闪存文件系统</h1><p>ESP8266具有4Mb的闪存（SPIFFS），除了能存放程序，还能存放各种资源文件，如html文件、系统配置文件等。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="写入-删除"><a href="#写入-删除" class="headerlink" title="写入&#x2F;删除"></a>写入&#x2F;删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;FS.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line">String file_name = <span class="string">&quot;/taichi-maker/notes.txt&quot;</span>; <span class="comment">//被读取的文件位置和名称</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  SPIFFS.format();    <span class="comment">// 格式化SPIFFS，清除闪存中的所有内容</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(SPIFFS.begin())&#123; <span class="comment">// 启动SPIFFS</span></span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Started.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入信息</span></span><br><span class="line">  File dataFile = SPIFFS.open(file_name, <span class="string">&quot;w&quot;</span>);<span class="comment">// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息 &quot;w&quot;即write</span></span><br><span class="line">  dataFile.println(<span class="string">&quot;Hello IOT World.&quot;</span>);       <span class="comment">// 向dataFile写入字符串信息       </span></span><br><span class="line">  dataFile.close();                           <span class="comment">// 完成文件写入后关闭文件</span></span><br><span class="line">  <span class="comment">// 删除信息</span></span><br><span class="line">  <span class="keyword">if</span> (SPIFFS.remove(file_name))&#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查闪存中是否有file_name</span></span><br><span class="line"><span class="keyword">if</span> (SPIFFS.exists(file_name))&#123;</span><br><span class="line">  Serial.print(file_name);</span><br><span class="line">  Serial.println(<span class="string">&quot; FOUND.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  Serial.print(file_name);</span><br><span class="line">  Serial.print(<span class="string">&quot; NOT FOUND.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">File dataFile = SPIFFS.open(File_name,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">// 读取文件内容并输出到串口</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;dataFile.size(); i++)&#123;</span><br><span class="line">  Serial.print((<span class="type">char</span>)dataFile.read());       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataFile.close();</span><br><span class="line">Dir dir = SPIFFS.openDir(folder_name); <span class="comment">// 读取目录对象</span></span><br><span class="line"><span class="keyword">while</span> (dir.next())&#123;</span><br><span class="line">  Serial.print(dir.fileName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="闪存信息"><a href="#闪存信息" class="headerlink" title="闪存信息"></a>闪存信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闪存文件系统信息</span></span><br><span class="line">  SPIFFS.info(fs_info);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可用空间总和（单位：字节）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;totalBytes: &quot;</span>);     </span><br><span class="line">  Serial.print(fs_info.totalBytes); </span><br><span class="line">  Serial.println(<span class="string">&quot; Bytes&quot;</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 已用空间（单位：字节）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;usedBytes: &quot;</span>); </span><br><span class="line">  Serial.print(fs_info.usedBytes);</span><br><span class="line">  Serial.println(<span class="string">&quot; Bytes&quot;</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最大文件名字符限制（含路径和&#x27;\0&#x27;）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;maxPathLength: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.maxPathLength);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最多允许打开文件数量</span></span><br><span class="line">  Serial.print(<span class="string">&quot;maxOpenFiles: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.maxOpenFiles);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储块大小</span></span><br><span class="line">  Serial.print(<span class="string">&quot;blockSize: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.blockSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储页大小</span></span><br><span class="line">  Serial.print(<span class="string">&quot;pageSize: &quot;</span>);</span><br><span class="line">  Serial.println(fs_info.pageSize);</span><br></pre></td></tr></table></figure><h1 id="应用技巧"><a href="#应用技巧" class="headerlink" title="应用技巧"></a>应用技巧</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/19/hello-world/"/>
      <url>/2023/09/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
