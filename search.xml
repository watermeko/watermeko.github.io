<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>易班校本化晚点签到</title>
      <link href="/2024/04/17/%E6%98%93%E7%8F%AD%E6%A0%A1%E6%9C%AC%E5%8C%96%E6%99%9A%E7%82%B9%E7%AD%BE%E5%88%B0/"/>
      <url>/2024/04/17/%E6%98%93%E7%8F%AD%E6%A0%A1%E6%9C%AC%E5%8C%96%E6%99%9A%E7%82%B9%E7%AD%BE%E5%88%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写篇文章教教不懂的群u们怎么实现自动晚点签到。</p><p>要准备的东西：</p><ul><li>一台电脑（以Windows11系统为例）</li><li>电脑上安装了Python和Git（如果你不懂如何安装的话，请看本文的“参考资料”）</li><li>能顺畅访问Github的网络环境</li><li>一颗会百度的脑子</li></ul><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><ol><li><p>点击任务栏中windows的徽标，搜索“cmd”，然后打开“命令提示符”，这时会有一个黑色框框弹出来。</p></li><li><p>复制下面这段命令，按<strong>鼠标右键</strong>粘贴到黑色框框中，并点击<strong>回车键</strong>。</p><p><code>pip install --upgrade git+https://github.com/Qs315490/fyiban</code></p><p>如果安装成功，黑框框中会提示<code>Successfully installed fyiban-1.0.8</code>。如果安装失败，请检查你的网络并重试。</p></li><li><p>随后在一个<strong>你能记得住</strong>的地方（路径中不要有中文），新建一个名为<code>YibanScript</code>的<strong>文本文件</strong>。</p></li><li><p>打开这个文件，复制以下内容，粘贴进去并保存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> yiban <span class="keyword">import</span> Yiban</span><br><span class="line"></span><br><span class="line">SIGN_DATA=<span class="string">&#x27;&#123;&quot;Reason&quot;:&quot;&quot;,&quot;AttachmentFileName&quot;:&quot;&quot;,&quot;LngLat&quot;:&quot;118.59,24.56&quot;,&quot;Address&quot;:&quot;福建省泉州市晋江市福州大学晋江校区&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">yb = Yiban(<span class="string">&quot;账号&quot;</span>,<span class="string">&quot;密码&quot;</span>)</span><br><span class="line">result = yb.submit_sign_feedback(SIGN_DATA)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中“账号”“密码”改成你自己的易班账号密码，注意只修改引号内的内容。</p></li><li><p>关闭编辑器，将这个文件的后缀名由<code>.txt</code>改为<code>.py</code>。（你或许看不到后缀名，请自行搜索如何更改后缀名）</p></li><li><p>在<code>YibanScript</code>所在的文件夹中点击鼠标右键，在菜单中选择“在终端中打开”。</p></li><li><p>在终端中输入<code>python YibanScript.py</code>，如果一切正常，终端会提示“签到成功”。</p></li></ol><h1 id="自动化操作"><a href="#自动化操作" class="headerlink" title="自动化操作"></a>自动化操作</h1><p>上面我们已经知道了如何手动进行打卡，接下来实现自动化打卡。</p><p>首先按Win键+R键打开“运行”，在其中输入<code> compmgmt.msc</code>并点击回车键。</p><p><img src="https://telegraph-image-6ky.pages.dev/file/e4cdd9ad8188b3db49a77.png"></p><p><img src="https://telegraph-image-6ky.pages.dev/file/7090f00a9db3be6b01b2d.png"></p><p><img src="https://telegraph-image-6ky.pages.dev/file/0dd4bd4d1168c7c016e25.png"></p><p><img src="https://telegraph-image-6ky.pages.dev/file/4a8a64b811d06916b43e6.png"></p><p><img src="https://telegraph-image-6ky.pages.dev/file/f79c09a3ede26c4b0fb29.png"></p><p><img src="https://telegraph-image-6ky.pages.dev/file/1be021d6bb1368f07bc8b.png"></p><p>大功告成，现在电脑会在指定时段自动运行YibanScript.py，实现自动打卡了。不过我依然建议你头几天在自动打卡过后再看一下打卡是否成功。需要注意的是，你的电脑在指定时间必须是处在运行状态的。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1016959856222624">安装Python -廖雪峰</a></p><p><a href="https://git-scm.com/downloads">Git官网</a></p><p><a href="https://github.com/Qs315490/fyiban">源码</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机自动化操作：Scrpy、Pyautogui与Pytesseract</title>
      <link href="/2024/01/08/%E6%89%8B%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C%EF%BC%9AScrpy%E3%80%81Pyautogui%E4%B8%8EPytesseract/"/>
      <url>/2024/01/08/%E6%89%8B%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C%EF%BC%9AScrpy%E3%80%81Pyautogui%E4%B8%8EPytesseract/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>常常需要在手机上进行一些自动化操作，然而在手机上运行的脚本远远不如能在电脑上运行的脚本强大。我们可以借助Scrpy将手机画面投射到电脑上，再在电脑上运行脚本来自动化操作手机。</p><h1 id="Scrpy的使用"><a href="#Scrpy的使用" class="headerlink" title="Scrpy的使用"></a>Scrpy的使用</h1><blockquote><p>This application mirrors Android devices (video and audio) connected via USB or <a href="https://github.com/Genymobile/scrcpy/blob/master/doc/connection.md#tcpip-wireless">over TCP&#x2F;IP</a>, and allows to control the device with the keyboard and the mouse of the computer. It does not require any <em>root</em> access. It works on <em>Linux</em>, <em>Windows</em> and <em>macOS</em>.</p></blockquote><p>从<a href="https://github.com/Genymobile/scrcpy">这里</a>下载scrpy，解压到你能记住的位置，随后把scrpy的主目录路径添加至系统环境变量中。此外，我们还需要<a href="https://github.com/Tomotoes/scrcpy-gui">scrcpy-gui</a>，这是一个为scrpy开发的中文gui程序。</p><p>以管理员模式运行<code>ScrcpyGui.exe</code>，然后使用数据线连接手机和电脑。在出现的列表中勾选你的设备，并点击:<code>打开镜像</code>。</p><p>如果连接失败：</p><ul><li><p>确认手机的usb调试功能是否打开</p></li><li><p>确认手机usb是否允许传输多媒体（文件）</p></li><li><p>尝试重启电脑，以及重新连接数据线</p></li></ul><p>如果一切正常，电脑上就会弹出窗口显示手机的画面，你可以用鼠标操作它。</p><p>scrpy还有许多可配置的选项：</p><p><img src="https://telegraph-image-6ky.pages.dev/file/16219f71fbdef6a8e3749.png" alt="scrpy的配置"></p><h1 id="PyAutoGUI的使用"><a href="#PyAutoGUI的使用" class="headerlink" title="PyAutoGUI的使用"></a>PyAutoGUI的使用</h1><blockquote><p>PyAutoGUI is a cross-platform GUI automation Python module for human beings. Used to programmatically control the mouse &amp; keyboard.</p></blockquote><p>Pyautogui能方便地帮我们做一些自动化操作，比如模拟键盘、鼠标输入，捕获屏幕等。要注意的是，使用pyautogui的程序要以管理员模式运行。</p><p>首先是安装与导入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyautogui</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br></pre></td></tr></table></figure><p>以下是一些常用的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">screenWidth, screenHeight = pyautogui.size() <span class="comment"># 获取显示器分辨率</span></span><br><span class="line">currentMouseX, currentMouseY = pyautogui.position() <span class="comment"># 获取鼠标当前位置</span></span><br><span class="line"></span><br><span class="line">pyautogui.moveTo(<span class="number">50</span>, <span class="number">50</span>) <span class="comment"># 将鼠标移动到指定位置</span></span><br><span class="line">pyautogui.click() <span class="comment"># 单击一次鼠标左脚。该函数为有多个可选的参数如：点击的位置、次数、按键等</span></span><br><span class="line">pyautogui.click(<span class="string">&#x27;button.png&#x27;</span>) <span class="comment"># 从屏幕上寻找&#x27;button.png&#x27;出现的地方并点击它的中心位置</span></span><br><span class="line"></span><br><span class="line">pyautogui.write(<span class="string">&#x27;Hello world!&#x27;</span>, interval=<span class="number">0.25</span>) <span class="comment"># 以间隔时间输入文字</span></span><br><span class="line">pyautogui.press(<span class="string">&#x27;esc&#x27;</span>)  <span class="comment"># 按指定按键，所有按键的名称可以在pyautogui.KEY_NAMES找到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> pyautogui.hold(<span class="string">&#x27;shift&#x27;</span>): <span class="comment"># 按住某按键的同时执行其他操作</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment"># 按组合按键</span></span><br></pre></td></tr></table></figure><p>还有一些拖拽、弹窗之类的操作可以参考官方文档。</p><h1 id="Python-Tesseract的使用"><a href="#Python-Tesseract的使用" class="headerlink" title="Python Tesseract的使用"></a>Python Tesseract的使用</h1><blockquote><p>Python-tesseract is an optical character recognition (OCR) tool for python. That is, it will recognize and “read” the text embedded in images.</p><p>Python-tesseract is a wrapper for <a href="https://github.com/tesseract-ocr/tesseract">Google’s Tesseract-OCR Engine</a>. It is also useful as a stand-alone invocation script to tesseract, as it can read all image types supported by the Pillow and Leptonica imaging libraries, including jpeg, png, gif, bmp, tiff, and others. Additionally, if used as a script, Python-tesseract will print the recognized text instead of writing it to a file.</p></blockquote><p>Pytesseract基于Tesseract，所以要先在电脑上安装<a href="https://tesseract-ocr.github.io/tessdoc/Installation.html">Tesseract</a>。在安装的时候注意选择你要使用的语言包。</p><p><img src="https://telegraph-image-6ky.pages.dev/file/2efa0d4b89e0794674a32.png"></p><p>然后是Pytesseract的安装和导入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytesseract</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br></pre></td></tr></table></figure><p>用Pytesseract能简单地识别图像中的文字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r&quot;your_path&quot;</span> <span class="comment"># 首先要设置tesseract.exe的路径</span></span><br><span class="line"></span><br><span class="line">screenshot = pyautogui.screenshot(region=(x, y, w, h)) <span class="comment"># 使用pyautogui截取图像</span></span><br><span class="line"><span class="built_in">print</span>(pytesseract.get_languages(config=<span class="string">&#x27;&#x27;</span>)) <span class="comment"># 获取所有可用的语言</span></span><br><span class="line">text = pytesseract.image_to_string(screenshot, lang=<span class="string">&#x27;chi_sim&#x27;</span>) <span class="comment"># [lang]是要使用的语言</span></span><br></pre></td></tr></table></figure><p>此外，Pytesseract还有图像转xml、pdf等功能。参考官方文档。 </p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/Genymobile/scrcpy">Genymobile&#x2F;scrcpy: Display and control your Android device (github.com)</a></p><p><a href="https://github.com/Tomotoes/scrcpy-gui">Tomotoes&#x2F;scrcpy-gui: 👻 A simple &amp; beautiful GUI application for scrcpy.(github.com)</a></p><p><a href="https://pyautogui.readthedocs.io/en/latest/">Welcome to PyAutoGUI’s documentation! — PyAutoGUI documentation</a></p><p><a href="https://github.com/madmaze/pytesseract">madmaze&#x2F;pytesseract: A Python wrapper for Google Tesseract (github.com)</a></p><p><a href="https://tesseract-ocr.github.io/tessdoc/Installation.html">Introduction | tessdoc (tesseract-ocr.github.io)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：一些提高代码质量的基本 Type hinting</title>
      <link href="/2023/11/22/Python%EF%BC%9A%E4%B8%80%E4%BA%9B%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC-Type-hinting/"/>
      <url>/2023/11/22/Python%EF%BC%9A%E4%B8%80%E4%BA%9B%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC-Type-hinting/</url>
      
        <content type="html"><![CDATA[<p><em>本文转载自<a href="https://www.less-bug.com/posts/python-type-hinting-basics/">Python：一些提高代码质量的基本 Type hinting</a></em></p><p>有一天，程序员 Alice 提交了代码。我们来看看他的代码好不好维护？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_authors_names</span>(<span class="params">posts</span>):</span><br><span class="line">    authors_names = []</span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">        author = post[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">        author_name = author[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">        authors_names.append(author_name)</span><br><span class="line">    <span class="keyword">return</span> authors_names</span><br></pre></td></tr></table></figure><p>在 2023 年，答案是确定的，这就是一坨大便。现在已经有了类型标注特性，如果不是为了兼容性考虑，不写类型的行为比不写注释更加恶劣！</p><p>味道指数：★★（鉴定为：臭味）</p><p>首先，posts 属于 Any 数据类型，但是代码里强假设了它是一个列表，且列表元素每个都具有 author 字段，每个 author 字段的值都有 name 字段。这种假设没有任何东西来保证。导致拉屎一时爽，维护火葬场。</p><p>打回去重写！</p><p>五分钟之后，Alice 给出了新的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_authors_names</span>(<span class="params">posts</span>):</span><br><span class="line">    authors_names = []</span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">        author = post.get(<span class="string">&quot;author&quot;</span>)  <span class="comment"># 使用字典的get方法获取值，如果键不存在则返回None</span></span><br><span class="line">        <span class="keyword">if</span> author <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            author_name = author.get(<span class="string">&quot;name&quot;</span>)  <span class="comment"># 使用字典的get方法获取值，如果键不存在则返回None</span></span><br><span class="line">            <span class="keyword">if</span> author_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                authors_names.append(author_name)</span><br><span class="line">    <span class="keyword">return</span> authors_names</span><br></pre></td></tr></table></figure><p>Alice 想：哈哈，我检查了空值，这样代码质量大大提高！</p><p>恰恰相反，这种代码是真正的屎山。</p><p>味道指数：三颗星（鉴定为：强烈的臭味）</p><p>这是我工作中遇到同事最喜欢写的代码。这些同事喜欢在代码的左边画三角形，三角形越大，缩进越多，就越能促进游标卡尺的销量，帮助我国走出经济危机。</p><p>Alice，你不用写了，还是我来！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    email: <span class="built_in">str</span></span><br><span class="line">    bio: <span class="built_in">str</span></span><br><span class="line">    website: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    author: Author</span><br><span class="line">    publication_date: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_authors_names</span>(<span class="params">posts: <span class="type">List</span>[Post]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">return</span> [post[<span class="string">&quot;author&quot;</span>][<span class="string">&quot;name&quot;</span>] <span class="keyword">for</span> post <span class="keyword">in</span> posts]</span><br></pre></td></tr></table></figure><p>味道指数：?（请网友自行鉴定）</p><p>这里我们利用了 Python 的 typing 特性，为参数标记了类型。这样，我们就可以在编译时期发现错误，而不是在运行时期。</p><p>之后如果要新增功能，用到了新的字段，也可以直接利用类型提示编码，不用你重新复现出数据的来源，然后打印出来一个个看。</p><p>为了告诉大家有多香，我简单演示一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_total_content_length</span>(<span class="params">posts: <span class="type">List</span>[Post]</span>):</span><br><span class="line">    total_length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">        content = post[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">        total_length += <span class="built_in">len</span>(content)</span><br><span class="line">    <span class="keyword">return</span> total_length</span><br></pre></td></tr></table></figure><p>当我们输入 <code>[</code> 的时候，编辑器就会提示可以输入什么。</p><p>假设我不小心把字段名打错了：到编辑器直接就报错了。这种小毛病如果运行时才发现，而且是在生产环境，那就是灾难了。</p><h2 id="常见的-typing"><a href="#常见的-typing" class="headerlink" title="常见的 typing"></a>常见的 typing</h2><p>下面我们介绍一下 Python 的常用的 typing。介绍完之后我们继续攻占下一个屎山！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typing <span class="keyword">as</span> t</span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">greet: <span class="built_in">str</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 浮点数</span></span><br><span class="line">radius: <span class="built_in">float</span> = <span class="number">0.1</span></span><br><span class="line"><span class="comment"># 整数</span></span><br><span class="line">num_children: <span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line"><span class="comment"># 布尔值</span></span><br><span class="line">is_cool: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 字节串</span></span><br><span class="line">data: <span class="built_in">bytes</span> = <span class="string">b&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">numbers: <span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line">coordinates: <span class="built_in">tuple</span>[<span class="built_in">float</span>, <span class="built_in">float</span>] = (<span class="number">3.5</span>, <span class="number">2.7</span>)</span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">person: <span class="built_in">dict</span>[<span class="built_in">str</span>, t.<span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]] = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 集合</span></span><br><span class="line">fruits: <span class="built_in">set</span>[<span class="built_in">str</span>] = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 自定义类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x: <span class="built_in">float</span>, y: <span class="built_in">float</span></span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"><span class="comment"># 使用自定义类型</span></span><br><span class="line">p1: Point = Point(<span class="number">2.0</span>, <span class="number">3.5</span>)</span><br><span class="line">p2: Point = Point(<span class="number">1.0</span>, -<span class="number">4.5</span>)</span><br><span class="line"><span class="comment"># 函数类型注解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="comment"># 使用函数类型注解</span></span><br><span class="line">result: <span class="built_in">int</span> = add(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 类型别名</span></span><br><span class="line">Vector = t.<span class="type">Tuple</span>[<span class="built_in">float</span>, <span class="built_in">float</span>]</span><br><span class="line"><span class="comment"># 使用类型别名</span></span><br><span class="line">vector: Vector = (<span class="number">2.5</span>, <span class="number">1.8</span>)</span><br><span class="line"><span class="comment"># 可选类型</span></span><br><span class="line">name: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 默认参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_person</span>(<span class="params">name: <span class="built_in">str</span> = <span class="string">&quot;John&quot;</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="comment"># 使用默认参数</span></span><br><span class="line">greet_person()  <span class="comment"># 输出: Hello, John!</span></span><br><span class="line">greet_person(<span class="string">&quot;Alice&quot;</span>)  <span class="comment"># 输出: Hello, Alice!</span></span><br></pre></td></tr></table></figure><h2 id="屎山重构之简单工厂"><a href="#屎山重构之简单工厂" class="headerlink" title="屎山重构之简单工厂"></a>屎山重构之简单工厂</h2><p>好，现在 Bob 登场，他写了一个 create_storage() 函数。实现了根据 storage_type 生成不同的 StorageClient 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">S3StorageClient</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sync</span>(<span class="params">self, src, dest</span>):</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AzureCloudStorageClient</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sync</span>(<span class="params">self, src, dest</span>):</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_storage</span>(<span class="params">storage_type: <span class="type">Literal</span>[<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;azure&quot;</span>]</span>):</span><br><span class="line">    <span class="keyword">if</span> storage_type == <span class="string">&quot;s3&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> S3StorageClient()</span><br><span class="line">    <span class="keyword">elif</span> storage_type == <span class="string">&quot;azure&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> AzureCloudStorageClient()</span><br></pre></td></tr></table></figure><p>还是那句话，在 Python3.5 之前这么写没问题，但是现在这么写就是给自己挖坑。</p><p>我们先不改代码，大家看能在这个代码找到几个问题？</p><ol><li><p>sync 函数，能理解 src 和 dest 代表什么吗？是从本地的 src 路径复制到远程的 dest 路径吗？还是反过来？还是两边都是远程路径？还是说都可以？传入的是相对路径还是绝对路径？</p></li><li><p>万一增加新的 StorageClient，怎么保证实现者能够实现所需要的函数（sync）</p></li><li><p>sync 的返回值是什么类型？</p></li><li><p>每次使用者都需要手动输入 storage_type，万一输错了怎么办？那外面每次都需要套个 try catch?</p></li></ol><p>我们现在一步步修改。第一步是定义一个抽象基类叫做 StorageClient，抽象基类的话，相当于其他语言中的接口，用来限定它的子类型必须实现哪些方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> ParseResult</span><br><span class="line"><span class="keyword">import</span> typing <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">URI = ParseResult</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StorageClient</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sync</span>(<span class="params">self, src: URI, dest: URI</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Sync files from a source URI to a destination URI.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            src: The source URI. </span></span><br><span class="line"><span class="string">                For example, s3://bucket/path/to/file or file://path/to/file.</span></span><br><span class="line"><span class="string">            dest: The destination URI. </span></span><br><span class="line"><span class="string">                For example, s3://bucket/path/to/file or file://path/to/file.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            ValueError: If the source or destination URI is invalid.</span></span><br><span class="line"><span class="string">            IOError: If the source or destination URI is not accessible.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们还增加了注释，告诉调用者每个参数的含义。并且我们用 URI 作为参数类型，这样用户就知道，传入的 URI schema 不同，执行同步的来源和目标就会对应变化。</p><p>注释中还告诉用户什么情况下这个函数会抛出什么异常。这样调用方可以精细处理异常。</p><p>我们可以尝试增加一个新的 StorageClient，比如 WebDavStorageClient，然后故意不实现 sync，可以看到编辑器直接报错了。</p><p>下面我们再来解决 create_storage 工厂函数。这里你可以选择用 Literal 或者枚举。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_storage</span>(<span class="params"></span></span><br><span class="line"><span class="params">    storage_type: t.<span class="type">Literal</span>[<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;azure&quot;</span>]</span></span><br><span class="line"><span class="params"></span>) -&gt; StorageClient:</span><br><span class="line">    <span class="keyword">match</span> storage_type:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;s3&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> S3StorageClient()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;azure&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> AzureCloudStorageClient()</span><br><span class="line">        <span class="keyword">case</span> _ <span class="keyword">as</span> unreachable:</span><br><span class="line">            t.assert_never(unreachable)</span><br></pre></td></tr></table></figure><p>实际上最后两行都可以去掉。</p><p>我们来看最终的代码：</p><p>怎么样，是不是屎味大减？</p><p>有关所有的 Typing 特性，请参考：<a href="https://docs.python.org/3/library/typing.html">typing — Support for type hints — Python 3.12.0 documentation</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加快Github Pages国内访问速度</title>
      <link href="/2023/10/01/%E5%8A%A0%E5%BF%ABGithubPages%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/"/>
      <url>/2023/10/01/%E5%8A%A0%E5%BF%ABGithubPages%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>白嫖Github Pages固然很爽，但由于墙的存在，在不使用魔法的情况下访问托管在Github Pages上的网页将会十分缓慢。于是我不得不做出一些优化来加快访问速度。本文针对Hexo博客而写，我使用的Hexo版本为4.3.1，主题为Butterfly。</p><h1 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h1><p>其实Github Pages的加载速度尚可，而最让人不能忍受的便是那乌龟般的图片加载速度。想要加快图片的加载速度，最好的方法就是不将图片托管在Github Pages上，而是使用图床。</p><p>有如下公共图床是我推荐的：</p><ul><li><p><a href="sm.ms">SM.MS</a>  虽然是国外的图床，但访问速度尚可，也不存在突然跑路的可能</p><ul><li>支持API操作、免费5GB存储空间、图片限制5MB、Telegram Bot</li></ul></li><li><p><a href="https://www.superbed.cn/">聚合图床</a></p><ul><li>支持API操作、文档详细、不限图片大小、免费用户1000张图片限制</li></ul></li></ul><p>有如下自建图床是我推荐的：</p><ul><li><p><a href="https://www.lsky.pro/">Lsky Pro - 兰空图床</a></p></li><li><p>在Cloudflare上搭建免费无限空间的图床</p></li></ul><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>Hexo生成的html&#x2F;js&#x2F;css文件中有大量注释、空格等无用的内容。可以使用<a href="https://gulpjs.com/">gulp</a>对这些静态资源进行压缩，从而节省流量、提高加载速率。</p><h2 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h2><p>在本机安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><p>在GitHub Action 或其他 CI\CD 平台安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure><p>安装必要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev \</span><br><span class="line">            gulp-minify-css \</span><br><span class="line">            gulp-babel \</span><br><span class="line">            gulp-uglify \</span><br><span class="line">            gulp-htmlmin \</span><br><span class="line">            gulp-htmlclean \</span><br></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>在Hexo博客的根目录下，新建<code>gulpfile.js</code>文件，并将以下内容复制进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&quot;gulp-minify-css&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlclean&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-css&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.css&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-html&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.html&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ignoreCustomFragments</span>: [<span class="regexp">/\&#123;\&#123;[\s\S]*?\&#125;\&#125;/</span>],</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-js&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&quot;./public/**/*.js&quot;</span>, <span class="string">&quot;!./public/js/**/*min.js&quot;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(</span><br><span class="line">  <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  gulp.<span class="title function_">series</span>(</span><br><span class="line">    gulp.<span class="title function_">parallel</span>(<span class="string">&quot;minify-html&quot;</span>, <span class="string">&quot;minify-css&quot;</span>, <span class="string">&quot;minify-js&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在使用<code>hexo g</code>生成静态资源后，运行<code>gulp</code>来对这些资源进行压缩。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCA9685舵机板驱动详解</title>
      <link href="/2023/09/28/PCA9685%E8%88%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E6%9D%BF%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/09/28/PCA9685%E8%88%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E6%9D%BF%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>pca9685驱动板支持控制16路舵机，采用i2c通信协议。</p><p><img src="https://telegraph-image-6ky.pages.dev/file/12da4aed45a84d714ee04.png"></p><ul><li><p>VCC：PCA9685芯片的电源</p></li><li><p>V+：舵机的电源</p><ul><li>舵机数量较少时电源可以通过V+引脚输入，较多时通过绿色电源输入端输入</li></ul></li></ul><h1 id="Arduino驱动示例"><a href="#Arduino驱动示例" class="headerlink" title="Arduino驱动示例"></a>Arduino驱动示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Adafruit_PWMServoDriverh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVO_45 187</span></span><br><span class="line"></span><br><span class="line">Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  pwm.begin();</span><br><span class="line">  pwm.setPWMFreq(<span class="number">50</span>);</span><br><span class="line">  pwm.setPWM(<span class="number">0</span>,<span class="number">0</span>,SERVO_45);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本示例使用了&#96;Adafruit PWM Servo Driver Library。</p><p>该程序可以使连接在PCA9685舵机驱动板上0号位的舵机转动45°。</p><p><code>setPWMFreq()</code>设置了IIC通信的更新频率（50HZ对应脉冲周期20ms），<code>setPWM()</code>的三个参数依次为舵机编号、脉冲起始时间、脉冲结束时间，其中脉冲时间要以寄存器的值来表示（187对应1.0ms）。 </p><h1 id="舵机控制逻辑"><a href="#舵机控制逻辑" class="headerlink" title="舵机控制逻辑"></a>舵机控制逻辑</h1><p>上述示例使用舵机型号为<code>SG90</code>，运动范围0°-180°，舵机的控制周期信号为20ms，工作脉冲在0.5ms-2.5ms之间，舵机的转动角度由PCA9685的12位寄存器中的值来决定，而寄存器的值由脉冲时间决定。故可以得到<code>脉冲时间-寄存器值-转动角度</code>的关系如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;0.5ms-0°&#x27;</span>:<span class="number">0.5</span>*<span class="number">204</span>=<span class="number">102</span></span><br><span class="line"><span class="string">&#x27;1.0ms-45°&#x27;</span>:<span class="number">1</span>*<span class="number">204</span>=<span class="number">204</span></span><br><span class="line"><span class="string">&#x27;1.5ms-90°&#x27;</span>:<span class="number">1.5</span>*<span class="number">204</span>=<span class="number">306</span></span><br><span class="line"><span class="string">&#x27;2.0ms-135°&#x27;</span>:<span class="number">2</span>*<span class="number">204</span>=<span class="number">408</span></span><br><span class="line"><span class="string">&#x27;2.5ms-180°&#x27;</span>:<span class="number">2.5</span>*<span class="number">204</span>=<span class="number">510</span></span><br></pre></td></tr></table></figure><p>然而在实际使用时会有误差出现，故除了0°与180°的情况，要将寄存器值乘以0.915的系数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;0.5ms-0°&#x27;</span>:<span class="number">0.5</span>*<span class="number">204</span>=<span class="number">102</span></span><br><span class="line"><span class="string">&#x27;1.0ms-45°&#x27;</span>:<span class="number">1</span>*<span class="number">204</span>=<span class="number">204</span>*<span class="number">0.915</span>=<span class="number">187</span></span><br><span class="line"><span class="string">&#x27;1.5ms-90°&#x27;</span>:<span class="number">1.5</span>*<span class="number">204</span>=<span class="number">306</span>*<span class="number">0.915</span>=<span class="number">280</span></span><br><span class="line"><span class="string">&#x27;2.0ms-135°&#x27;</span>:<span class="number">2</span>*<span class="number">204</span>=<span class="number">408</span>*<span class="number">0.915</span>=<span class="number">373</span></span><br><span class="line"><span class="string">&#x27;2.5ms-180°&#x27;</span>:<span class="number">2.5</span>*<span class="number">204</span></span><br></pre></td></tr></table></figure><p><img src="https://telegraph-image-6ky.pages.dev/file/5be2ddee20ad6ff4c5377.png" alt="1708329790908"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266-NodeMCU食用指南</title>
      <link href="/2023/09/20/ESP8266-NodeMCU%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2023/09/20/ESP8266-NodeMCU%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="WIFI模式"><a href="#WIFI模式" class="headerlink" title="WIFI模式"></a>WIFI模式</h2><h3 id="接入点模式"><a href="#接入点模式" class="headerlink" title="接入点模式"></a>接入点模式</h3><p>esp8266作为接入点，其他设备通过wifi与esp8266连接。</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用</span></span><br><span class="line"><span class="comment">电脑或者手机连接NodeMCU所建立WiFi网络。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;wifi_name&quot;</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;12345678&quot;</span>; <span class="comment">// 如果建立的WiFi不要密码，则在双引号内不要填入任何信息</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);              <span class="comment">// 启动串口通讯</span></span><br><span class="line"></span><br><span class="line">  WiFi.softAP(ssid, password);     <span class="comment">// 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。</span></span><br><span class="line"></span><br><span class="line">  Serial.print(<span class="string">&quot;Access Point: &quot;</span>);    <span class="comment">// 通过串口监视器输出信息</span></span><br><span class="line">  Serial.println(ssid);              <span class="comment">// 告知用户NodeMCU所建立的WiFi名</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address: &quot;</span>);      <span class="comment">// 以及NodeMCU的IP地址</span></span><br><span class="line">  Serial.println(WiFi.softAPIP());   <span class="comment">// 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无线终端模式"><a href="#无线终端模式" class="headerlink" title="无线终端模式"></a>无线终端模式</h3><p>esp8266与路由器连接。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此程序用于演示如何将NodeMcu以接入点模式工作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;wifi_name&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;pswd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>)</span><br><span class="line"></span><br><span class="line">    WiFi.begin(ssid, password);                  <span class="comment">// 启动网络连接</span></span><br><span class="line">    Serial.print(<span class="string">&quot;Connecting to &quot;</span>);              </span><br><span class="line">    Serial.print(ssid); </span><br><span class="line">    Serial.println(<span class="string">&quot; ...&quot;</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;                                   <span class="comment">// 这一段程序语句用于检查WiFi是否连接成功</span></span><br><span class="line">    <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;      </span><br><span class="line">        delay(<span class="number">1000</span>);                                                     </span><br><span class="line">        Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);     </span><br><span class="line">    &#125;                                            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网络服务器"><a href="#网络服务器" class="headerlink" title="网络服务器"></a>网络服务器</h1><h2 id="简单的网络服务器"><a href="#简单的网络服务器" class="headerlink" title="简单的网络服务器"></a>简单的网络服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址访问8266所建立的基本网页</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>       </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   </span></span><br><span class="line"></span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>; <span class="comment">// 括号中的数字是网路服务器响应http请求的端口号</span></span><br><span class="line">                                     <span class="comment">// 网络服务器标准http端口号为80，因此这里使用80为端口号</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *password = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  pinMode(LED_BUILTIN,OUTPUT); <span class="comment">//把内置led引脚设置为输出模式</span></span><br><span class="line"></span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;  </span><br><span class="line">    delay(<span class="number">1000</span>);                             </span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    </span><br><span class="line">  &#125;                                          </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动网络服务功能  </span></span><br><span class="line">  esp8266_server.begin();                   </span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, handleRoot);       <span class="comment">// 将页面&quot;/&quot;交给handleRoot()处理</span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/LED&quot;</span>,handleLED);</span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);  <span class="comment">// 将404页面交给handleNotFound()处理      </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// handleClient每次被调用时，NodeMCU都会检查一下是否接收到http请求。</span></span><br><span class="line">  esp8266_server.handleClient();     <span class="comment">// 处理http服务器访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;   <span class="comment">//处理网站根目录“/”的访问请求 </span></span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;&lt;form action=\&quot;/LED\&quot; method=\&quot;POST\&quot;&gt;&lt;input type=\&quot;submit\&quot; value=\&quot;Toggle LED\&quot;&gt;&lt;/form&gt;&quot;</span>);   <span class="comment">// 状态行、响应头、响应体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleLED</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));</span><br><span class="line">  esp8266_server.sendHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/&quot;</span>); <span class="comment">// 返回&quot;/&quot;</span></span><br><span class="line">  esp8266_server.send(<span class="number">303</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;                                        </span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>);   <span class="comment">// 当浏览器请求的网络资源无法在服务器找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>handleClient</code>函数长时间得不到调用，NodeMCU的网络服务会变得很不稳定。因此在使用NodeMCU执行网络服务功能的时候，一定要确保<code>handleClient</code>函数经常得以调用。</p><h1 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h1><h2 id="MQTT通信"><a href="#MQTT通信" class="headerlink" title="MQTT通信"></a>MQTT通信</h2><p>MQTT通信与HTTP通信都基于TCP&#x2F;IP协议，物联网应用中多使用MQTT协议，它有如下优点：</p><ul><li><p>MQTT是一种轻量级协议，因此可以在网络带宽受限的情况下使用。</p></li><li><p>MQTT使用发布&#x2F;订阅模式，这意味着客户端只需要订阅感兴趣的主题即可接收消息。这种模式可以减少网络流量和服务器负载。</p></li><li><p>MQTT支持QoS（Quality of Service）等级，可以确保消息传递的可靠性和一致性。</p></li><li><p>MQTT支持离线消息缓存和消息保留功能，这意味着客户端可以在重新连接到服务器时接收到之前未接收到的消息。</p></li></ul><h2 id="HTTP通信"><a href="#HTTP通信" class="headerlink" title="HTTP通信"></a>HTTP通信</h2><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">请求行:</span><br><span class="line">GET / HTTP/1.1 # &#x27;GET&#x27;:读取 &#x27;/&#x27;:网站首页 &#x27;HTTP/1.1&#x27;:协议版本</span><br><span class="line"></span><br><span class="line">请求头:</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.baidu.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Accept-Launguage</span><span class="punctuation">: </span>zh-CN,zh;q=0.8</span><br><span class="line"><span class="attribute">Accept-Ecoding</span><span class="punctuation">: </span>gzip,deflate,sdch</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">状态行:</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"><span class="language-makefile"><span class="section">响应头:</span></span></span><br><span class="line"><span class="language-makefile"><span class="section">Date: Fri,22 May 2009 06:07:21 GMT</span></span></span><br><span class="line"><span class="language-makefile"><span class="section">Content-Type: text/html;charset=UTF-8</span></span></span><br><span class="line"><span class="language-makefile"></span></span><br><span class="line"><span class="language-makefile"><span class="section">响应体:</span></span></span><br><span class="line"><span class="language-makefile">&lt;html&gt;...&lt;html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用WiFiClient库实现HTTP通信"><a href="#使用WiFiClient库实现HTTP通信" class="headerlink" title="使用WiFiClient库实现HTTP通信"></a>使用WiFiClient库实现HTTP通信</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">wifiClientRequest</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 建立WiFi客户端对象，对象名称client</span></span><br><span class="line">  WiFiClient client;    </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立字符串，用于HTTP请求</span></span><br><span class="line">  String httpRequest =  String(<span class="string">&quot;GET /&quot;</span>) + <span class="string">&quot; HTTP/1.1\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Host: &quot;</span> + host + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Connection: close\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过串口输出连接服务器名称以便查阅连接服务器的网址                      </span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connecting to &quot;</span>); </span><br><span class="line">  Serial.print(host); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// http服务器的默认端口号为80</span></span><br><span class="line">  <span class="keyword">if</span> (client.connect(host, httpPort))&#123; </span><br><span class="line">    Serial.println(<span class="string">&quot; Success!&quot;</span>);        </span><br><span class="line"></span><br><span class="line">    client.print(httpRequest);          <span class="comment">// 向服务器发送HTTP请求   </span></span><br><span class="line"></span><br><span class="line">    Serial.println(<span class="string">&quot;Web Server Response:&quot;</span>);        </span><br><span class="line">    <span class="keyword">while</span> (client.connected() || client.available())&#123; </span><br><span class="line">      <span class="keyword">if</span> (client.available())&#123;</span><br><span class="line">        String line = client.readStringUntil(<span class="string">&#x27;\n&#x27;</span>); <span class="comment">// 读取服务器发送的信息</span></span><br><span class="line">        Serial.println(line);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client.stop();                      <span class="comment">// 断开与服务器的连接</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot; connection failed!&quot;</span>);</span><br><span class="line">    client.stop();</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="闪存文件系统"><a href="#闪存文件系统" class="headerlink" title="闪存文件系统"></a>闪存文件系统</h1><p>ESP8266具有4Mb的闪存（SPIFFS），除了能存放程序，还能存放各种资源文件，如html文件、系统配置文件等。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="写入-删除"><a href="#写入-删除" class="headerlink" title="写入&#x2F;删除"></a>写入&#x2F;删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;FS.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line">String file_name = <span class="string">&quot;/taichi-maker/notes.txt&quot;</span>; <span class="comment">//被读取的文件位置和名称</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  SPIFFS.format();    <span class="comment">// 格式化SPIFFS，清除闪存中的所有内容</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(SPIFFS.begin())&#123; <span class="comment">// 启动SPIFFS</span></span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Started.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;SPIFFS Failed to Start.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入信息</span></span><br><span class="line">  File dataFile = SPIFFS.open(file_name, <span class="string">&quot;w&quot;</span>);<span class="comment">// 建立File对象用于向SPIFFS中的file对象（即/notes.txt）写入信息 &quot;w&quot;即write</span></span><br><span class="line">  dataFile.println(<span class="string">&quot;Hello IOT World.&quot;</span>);       <span class="comment">// 向dataFile写入字符串信息       </span></span><br><span class="line">  dataFile.close();                           <span class="comment">// 完成文件写入后关闭文件</span></span><br><span class="line">  <span class="comment">// 删除信息</span></span><br><span class="line">  <span class="keyword">if</span> (SPIFFS.remove(file_name))&#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.print(file_name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查闪存中是否有file_name</span></span><br><span class="line"><span class="keyword">if</span> (SPIFFS.exists(file_name))&#123;</span><br><span class="line">  Serial.print(file_name);</span><br><span class="line">  Serial.println(<span class="string">&quot; FOUND.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  Serial.print(file_name);</span><br><span class="line">  Serial.print(<span class="string">&quot; NOT FOUND.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">File dataFile = SPIFFS.open(File_name,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">// 读取文件内容并输出到串口</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;dataFile.size(); i++)&#123;</span><br><span class="line">  Serial.print((<span class="type">char</span>)dataFile.read());       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataFile.close();</span><br><span class="line">Dir dir = SPIFFS.openDir(folder_name); <span class="comment">// 读取目录对象</span></span><br><span class="line"><span class="keyword">while</span> (dir.next())&#123;</span><br><span class="line">  Serial.print(dir.fileName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="闪存信息"><a href="#闪存信息" class="headerlink" title="闪存信息"></a>闪存信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闪存文件系统信息</span></span><br><span class="line">  SPIFFS.info(fs_info);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可用空间总和（单位：字节）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;totalBytes: &quot;</span>);     </span><br><span class="line">  Serial.print(fs_info.totalBytes); </span><br><span class="line">  Serial.println(<span class="string">&quot; Bytes&quot;</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 已用空间（单位：字节）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;usedBytes: &quot;</span>); </span><br><span class="line">  Serial.print(fs_info.usedBytes);</span><br><span class="line">  Serial.println(<span class="string">&quot; Bytes&quot;</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最大文件名字符限制（含路径和&#x27;\0&#x27;）</span></span><br><span class="line">  Serial.print(<span class="string">&quot;maxPathLength: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.maxPathLength);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最多允许打开文件数量</span></span><br><span class="line">  Serial.print(<span class="string">&quot;maxOpenFiles: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.maxOpenFiles);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储块大小</span></span><br><span class="line">  Serial.print(<span class="string">&quot;blockSize: &quot;</span>); </span><br><span class="line">  Serial.println(fs_info.blockSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储页大小</span></span><br><span class="line">  Serial.print(<span class="string">&quot;pageSize: &quot;</span>);</span><br><span class="line">  Serial.println(fs_info.pageSize);</span><br></pre></td></tr></table></figure><h1 id="应用技巧"><a href="#应用技巧" class="headerlink" title="应用技巧"></a>应用技巧</h1><h2 id="多任务之Ticker库"><a href="#多任务之Ticker库" class="headerlink" title="多任务之Ticker库"></a>多任务之Ticker库</h2><p>ESP8266在运行过程中，只能一条线式的依次执行任务。但是我们在开发物联网项目时，可能需要ESP8266在执行某一任务的过程中，还能处理其它任务。比如，我们使用ESP8266来控制电机运行的同时，还需要定时检查某一个引脚上连接按钮有没有被用户按下。</p><p>为了解决以上问题，我们可以使用多线程，我使用的库是Ticker。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Tikcer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Ticker ticker;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    ticker.attach(interval, func, parameter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> parameter)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>Ticker.attach()</code>会以间隔时间<code>interval</code>执行定时任务<code>func(parameter)</code>，注意，<code>Tikcer.attach()</code>绑定的函数只能有最多一个参数。一个Tikcer对象仅能绑定一个函数。参数类型只能是char&#x2F;short&#x2F;int&#x2F;float&#x2F;void*&#x2F;char*</p><p><code>Ticker.detach()</code>会停止定时任务。</p><p>另外，在使用<code>Ticker.attach()</code>绑定的函数执行的时间必须很短，否则会产生不可预料的问题。对于执行时间较长的操作，如http请求，可以采用如下方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Tikcer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Ticker ticker;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    ticker.attach(interval, count_func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">count_func</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> parameter)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cont&gt;=interval)&#123;</span><br><span class="line">        httprequest()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
